# Generated by Django 3.2.8 on 2021-10-05 19:28

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='OktaUser',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('login', models.CharField(help_text='unique identifier for the user (username)', max_length=100, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='5 <= value length <= 100', regex='^.{5,100}$')])),
                ('email', models.EmailField(help_text='primary email address of user', max_length=254, validators=[django.core.validators.RegexValidator(message='5 <= value length <= 100', regex='^.{5,100}$')])),
                ('secondEmail', models.EmailField(blank=True, help_text='secondary email address of user typically used for account recovery', max_length=254, validators=[django.core.validators.RegexValidator(message='5 <= value length <= 100 (or nothing)', regex='(^.{5,100}$)|(Ë†$)')])),
                ('firstName', models.CharField(help_text='given name of the user (givenName)', max_length=50)),
                ('lastName', models.CharField(help_text='family name of the user (familyName)', max_length=50)),
                ('middleName', models.CharField(blank=True, help_text='middle name(s) of the user', max_length=50)),
                ('honorificPrefix', models.CharField(blank=True, help_text='honorific prefix(es) of the user, or title in most Western languages', max_length=50)),
                ('honorificSuffix', models.CharField(blank=True, help_text='honorific suffix(es) of the user', max_length=50)),
                ('title', models.CharField(blank=True, help_text='user\'s title, such as "Vice President', max_length=100)),
                ('displayName', models.CharField(blank=True, help_text='name of the user, suitable for display to end users', max_length=250)),
                ('nickName', models.CharField(blank=True, help_text='casual way to address the user in real life', max_length=50)),
                ('profileUrl', models.URLField(blank=True, help_text="url of user's online profile (e.g. a web page)")),
                ('primaryPhone', models.CharField(blank=True, help_text='primary phone number of user such as home number', max_length=100)),
                ('mobilePhone', models.CharField(blank=True, help_text='mobile phone number of user', max_length=100)),
                ('streetAddress', models.CharField(blank=True, help_text="full street address component of user's address", max_length=100)),
                ('city', models.CharField(blank=True, help_text="city or locality component of user's address (locality)", max_length=100)),
                ('state', models.CharField(blank=True, help_text="state or region component of user's address (region)", max_length=100)),
                ('zipCode', models.CharField(blank=True, help_text="zipcode or postal code component of user's address (postalCode)", max_length=100)),
                ('countryCode', models.CharField(blank=True, help_text="country name component of user's address (country)", max_length=2)),
                ('postalAddress', models.CharField(blank=True, help_text="mailing address component of user's address", max_length=100)),
                ('preferredLanguage', models.CharField(blank=True, help_text="user's preferred written or spoken languages", max_length=100)),
                ('locale', models.CharField(blank=True, help_text="user's default location for purposes of localizing items such as currency, date time format, numerical representations, etc.", max_length=5)),
                ('timezone', models.CharField(blank=True, help_text="user's time zone", max_length=100)),
                ('userType', models.CharField(blank=True, help_text='used to describe the organization to user relationship such as "Employee" or "Contractor"', max_length=100)),
                ('employeeNumber', models.CharField(blank=True, help_text='organization or company assigned unique identifier for the user', max_length=100)),
                ('costCenter', models.CharField(blank=True, help_text='name of a cost center assigned to user', max_length=100)),
                ('organization', models.CharField(blank=True, help_text="name of user's organization", max_length=100)),
                ('division', models.CharField(blank=True, help_text="name of user's division", max_length=100)),
                ('department', models.CharField(blank=True, help_text="name of user's department", max_length=100)),
                ('managerId', models.CharField(blank=True, help_text="id of a user's manager", max_length=100)),
                ('manager', models.CharField(blank=True, help_text="displayName of the user's manager", max_length=100)),
                ('password', models.CharField(blank=True, help_text="user's password", max_length=128)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. \nUnselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
